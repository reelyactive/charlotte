/**
 * Copyright reelyActive 2021-2023
 * We believe in an open Internet of Things
 */


// Constant definitions
const DEMO_SEARCH_PARAMETER = 'demo';
const HLC_MIN_HEIGHT_PX = 480;
const HLC_UNUSABLE_HEIGHT_PX = 120;
const SERVER_URL = 'http://localhost:3001';
const POLL_MILLISECONDS = 5000;
const SIGNATURE_SEPARATOR = '/';

// DOM elements
let connectIcon = document.querySelector('#connectIcon');
let demoalert = document.querySelector('#demoalert');
let target = document.getElementById('cy');

// Initialise based on URL search parameters, if any
let searchParams = new URLSearchParams(location.search);
let isDemo = searchParams.has(DEMO_SEARCH_PARAMETER);

setContainerHeight();

// Initialise charlotte and handle node taps
charlotte.init(target, { digitalTwins: cormorant.digitalTwins });
charlotte.on('tap', (nodeId) => { });

if(!isDemo) {
  beaver.poll(SERVER_URL, { intervalMilliseconds: POLL_MILLISECONDS });
  beaver.on('poll', () => {
    beaver.devices.forEach((device, deviceSignature) => {
      cormorant.retrieveDigitalTwin(deviceSignature, device, null,
                                    (digitalTwin, isRetrievedFromMemory) => {
        if(digitalTwin && !isRetrievedFromMemory) {
          charlotte.updateDigitalTwin(deviceSignature, digitalTwin);
        }
      });
    });
    charlotte.spin(beaver.devices, target, {});
  });
}
else {
  updateDemo({ intervalMilliseconds: POLL_MILLISECONDS });
}


// Set the height of the graph container
function setContainerHeight() {
  let container = document.getElementById('cy-container');
  let height = Math.max(window.innerHeight - HLC_UNUSABLE_HEIGHT_PX,
                        HLC_MIN_HEIGHT_PX) + 'px';
  container.setAttribute('style', 'height:' + height);
}


// Update the demo with context generated by starling.js
function updateDemo(options) {
  options = options || {};
  let response = starling.getContext('/context');
  let devices = response.devices || {};

  for(const deviceSignature in devices) {
    let device = devices[deviceSignature];
    cormorant.retrieveDigitalTwin(deviceSignature, device, null,
                                  (digitalTwin, isRetrievedFromMemory) => {
      if(digitalTwin && !isRetrievedFromMemory) {
        charlotte.updateDigitalTwin(deviceSignature, digitalTwin);
      }
    });
  }
  charlotte.spin(devices, target, {});

  if(Number.isInteger(options.intervalMilliseconds)) {
    setTimeout(updateDemo, options.intervalMilliseconds, options);
  }
}
